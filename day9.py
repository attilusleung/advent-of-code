import copy
import inp9
l_base = inp9.i
# l_base = [3,8,1001,8,10,8,105,1,0,0,21,46,59,84,93,110,191,272,353,434,99999,3,9,101,2,9,9,102,3,9,9,1001,9,5,9,102,4,9,9,1001,9,4,9,4,9,99,3,9,101,3,9,9,102,5,9,9,4,9,99,3,9,1001,9,4,9,1002,9,2,9,101,2,9,9,102,2,9,9,1001,9,3,9,4,9,99,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,1001,9,5,9,1002,9,3,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99]
# l_base = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0]
# l_base = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26, 27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5]
# l_base = [3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,
# -5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,
# l_base = [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]
# l_base = [3,9,8,9,10,9,4,9,99,-1,8]
# l_base = [3,9,7,9,10,9,4,9,99,-1,8]
# l_base = [104,1125899906842624,99]
# l_base = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
# 1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
# 999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]
# print(l_base[59], l_base[60], l_base[61], l_base[62])
# l_base = [1102,34915192,34915192,7,4,7,99,0]

class intcomp:
    def __init__(self, i):
        self.l = copy.deepcopy(l_base)
        self.l.extend([0] * 100000)
        self.input = [i]
        self.last_out = None
        self.entry = 0
        self.end = False
        self.base = 0
        self.int_code()

    def get_position(self, mode, i):
        if mode == 0:
            return self.l[i]
        if mode == 1:
            return i
        if mode == 2:
            return self.l[i] + self.base

    def int_code(self):
        l = self.l
        def get_mode(opcode):
            C = (opcode % 1000)//100
            B = (opcode % 10000)//1000
            A = (opcode % 100000)//10000
            # print((C, B, A))
            return (C, B, A)

        i = self.entry

        def get_next(c, i, j):
            m = get_mode(c)
            # print(m)
            ret = [self.get_position(m[x], i+x+1) for x in range(0, j)]
            # print(ret)
            # return ret if j != 1 else ret[0]
            if j == 1: return ret[0]
            return ret

        while i < len(l):
            opcode = l[i]
            if opcode % 100 == 99:
                self.end = True
                break
            elif opcode % 100 == 1:
                a, b, c = get_next(opcode, i, 3)
                l[c] = l[a] + l[b]

                i += 4
            elif opcode % 100 == 2:
                a, b, c = get_next(opcode, i, 3)
                l[c] = l[a] * l[b]
                i += 4
            elif opcode % 100 == 3:
                if not self.input:
                    self.entry = i
                    return
                inp = self.input.pop(0)
                a = get_next(opcode, i, 1)
                l[a] = inp
                i += 2
            elif opcode % 100 == 4:
                a = get_next(opcode, i, 1)
                out = l[a]
                print(out)
                self.last_out = out
                i += 2
            elif opcode % 100 == 5:
                a, b = get_next(opcode, i, 2)
                if (l[a]) != 0:
                    i = l[b]
                else:
                    i += 3
            elif opcode % 100 == 6:
                a, b = get_next(opcode, i, 2)
                if (l[a]) == 0:
                    i = l[b]
                else:
                    i += 3
            elif opcode % 100 == 7:
                a, b, c = get_next(opcode, i, 3)
                if (l[a]) < (l[b]):
                    l[c] = 1
                else:
                    l[c] = 0
                i += 4
            elif opcode % 100 == 8:
                a, b, c = get_next(opcode, i, 3)
                if (l[a]) == (l[b]):
                    l[c] = 1
                else:
                    l[c] = 0
                i += 4
            elif opcode % 100 == 9:
                a = get_next(opcode, i, 1)
                self.base += l[a]
                i += 2
            else:
                print("diu")
                break

    def next(self, i):
        self.input.append(i)
        self.int_code()
        return self.last_out

c = intcomp(2)
print(c.last_out)
